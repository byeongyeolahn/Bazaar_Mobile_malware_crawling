
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import pandas as pd
import time
import argparse
import os
import hashlib
import unzip



def _unzip():
    file_list = os.listdir('Zip_Sample')
    try:
        print("[+] 압축해제 시작")
        for ef in file_list:
            unzip.unzip_fun(f"Zip_Sample\\{ef}")
        print("[+] 압축해제 완료!")
    except:
        print("[+] 압축해제 대상 파일이 존재하지 않습니다.")
    
def file_hash():
    file_list = os.listdir('Sample')
    hash_list = []
    print(f"[+] 기존 파일 : {len(file_list)} 개")
    print("[+] 중복 검사를 위한 해시 추출 시작")
    for fl in file_list:
        sha256_hash = hashlib.sha256()
        with open(f"Sample\\{fl}", "rb") as f:
            data = f.read()
            f.close()
            hash_list.append(hashlib.sha256(data).hexdigest())
    print(f"[+] 기존 파일 {len(hash_list)} 개 해시 추출 완료")
    return hash_list
    
def _start(file_hash):

    file_name = []


    options = Options()

    # 옵션 설정
    user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'
    options.add_argument('user-agent=' + user_agent)
    options.add_experimental_option("excludeSwitches", ["enable-logging"])
    options.add_experimental_option('prefs', {
        "download.default_directory": 'C:\\Python\\Coding\\Bazaar_crawling\\Zip_Sample',
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True})
    driver = webdriver.Chrome(options=options)
 
    # 초기 검색어 입력
    query = 'tag:exe'

    # URL 접속
    url1 = 'https://bazaar.abuse.ch/browse/'
    driver.get(url1)
    time.sleep(10)

    search_tab = driver.find_element(By.CSS_SELECTOR, '#search')
    search_tab.send_keys(query)
    search_tab.send_keys(Keys.ENTER)
    
    time.sleep(3)

 
    # for i in range(1,4):
    for k in range(2,6):
        driver.find_element(By.XPATH, '//*[@id="samples_paginate"]/ul/li[{}]/a'.format(k)).click()
        for i in range(1,251):
            tag_td = driver.find_element(By.CSS_SELECTOR, '#samples > tbody > tr:nth-child({}) > td:nth-child(2) > a'.format(i))
            tag_href = tag_td.get_attribute('href')
            file_name.append(tag_href)
    print("[+] 파일 해시 정보 수집 완료")
    
    for h in range(len(file_name)):
        url_list = file_name[h]
        driver.get(url_list)
        # 중복 검사
        file_md5 = driver.find_element(By.ID, 'md5_hash')
        if file_md5.text in file_hash:
            print(f"{file_name[h]} 가 이미 존재합니다.")
            continue

        file_hash.append(file_md5.text)
        # 중복 아닐 경우 다운 진행 
        driver.find_element(By.XPATH, '/html/body/main/table/tbody/tr[7]/td/a').click()
        
        tag_div = driver.find_element(By.CSS_SELECTOR, 'body > main > div.container.text-center')
        tag_button = tag_div.find_element(By.TAG_NAME, 'button')
        tag_id = tag_button.get_attribute('id')
        driver.find_element(By.XPATH, '//*[@id="{}"]'.format(tag_id)).click()
        time.sleep(1)
    # CSV 생성
    df = pd.DataFrame(file_hash)
    df.columns = ['sha256']
    df.to_csv(path_or_buf='result.csv')


if __name__ == "__main__":
    _unzip()
    hash_list = file_hash()
    _start(hash_list)
    # file_unzip()
